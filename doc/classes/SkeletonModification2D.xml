<?xml version="1.0" encoding="UTF-8" ?>
<class name="SkeletonModification2D" inherits="Node" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A resource that operates on [Bone2D] nodes in a [Skeleton2D].
	</brief_description>
	<description>
		This resource provides an interface that can be expanded so code that operates on [Bone2D] nodes in a [Skeleton2D] can be mixed and matched together to create complex interactions.
		This is used to provide Godot with a flexible and powerful Inverse Kinematics solution that can be adapted for many different uses.
		Modifications will update in node order. Set [member Node.process_priority] to control the order relative to other nodes or to ensure updating after [AnimationPlayer].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_draw_editor_gizmo" qualifiers="virtual">
			<return type="void" />
			<description>
				Handle rendering of a custom gizmo by calling draw_ methods on [member skeleton_path]. You must first call [method set_editor_gizmo_dirty] to force the gizmo to draw, if in editor.
			</description>
		</method>
		<method name="_execute" qualifiers="virtual">
			<return type="void" />
			<param index="0" name="delta" type="float" />
			<description>
				Allows custom logic to run on this modification during internal process. delta is the frame time since last execute.
			</description>
		</method>
		<method name="_is_property_hidden" qualifiers="virtual">
			<return type="bool" />
			<param index="0" name="property_name" type="String" />
			<description>
				Return true if this property should be hidden from the inspector.
			</description>
		</method>
		<method name="clamp_angle">
			<return type="float" />
			<param index="0" name="angle" type="float" />
			<param index="1" name="min" type="float" />
			<param index="2" name="max" type="float" />
			<param index="3" name="invert" type="bool" />
			<description>
				Takes a angle and clamps it so it is within the passed-in [param min] and [param max] range. [param invert] will inversely clamp the angle, clamping it to the range outside of the given bounds.
			</description>
		</method>
		<method name="draw_editor_gizmo">
			<return type="void" />
			<description>
				Manually render the editor gizmo on the [Skeleton2D] node, if in editor.
			</description>
		</method>
		<method name="editor_draw_angle_constraints">
			<return type="void" />
			<param index="0" name="p_operation_bone" type="Bone2D" />
			<param index="1" name="min_bound" type="float" />
			<param index="2" name="max_bound" type="float" />
			<param index="3" name="constraint_enabled" type="bool" />
			<param index="4" name="constraint_in_localspace" type="bool" />
			<param index="5" name="constraint_inverted" type="bool" />
			<description>
				Helper function to draw a gizmo for an angle constraint.
			</description>
		</method>
		<method name="execute">
			<return type="void" />
			<param index="0" name="delta" type="float" />
			<description>
				Manually process the modification. If the modification is enabled, execute runs automatically during internal process.
			</description>
		</method>
		<method name="get_target_position" qualifiers="const">
			<return type="Vector2" />
			<param index="0" name="resolved_target" type="Variant" />
			<description>
				Returns the global position of the cached bone or node.
			</description>
		</method>
		<method name="get_target_rotation" qualifiers="const">
			<return type="float" />
			<param index="0" name="resolved_target" type="Variant" />
			<description>
				Returns the global rotation angle of the cached bone or node.
			</description>
		</method>
		<method name="get_target_transform" qualifiers="const">
			<return type="Transform2D" />
			<param index="0" name="resolved_target" type="Variant" />
			<description>
				Returns the global [Transform2D] of the cached bone or node.
			</description>
		</method>
		<method name="resolve_bone" qualifiers="const">
			<return type="Variant" />
			<param index="0" name="target_bone_path" type="NodePath" />
			<description>
				Resolves the NodePath and validates it can be cast to a Bone2D.
			</description>
		</method>
		<method name="resolve_node" qualifiers="const">
			<return type="Variant" />
			<param index="0" name="target_node_path" type="NodePath" />
			<description>
				Resolves the NodePath and validates it can be cast to a CanvasItem.
			</description>
		</method>
		<method name="set_editor_gizmo_dirty">
			<return type="void" />
			<param index="0" name="is_dirty" type="bool" />
			<description>
				Trigger [method _draw_editor_gizmo] to be run on the next frame, if in editor.
			</description>
		</method>
	</methods>
	<members>
		<member name="enabled" type="bool" setter="set_enabled" getter="get_enabled" default="true">
			If [code]true[/code], the modification's [method _execute] function will be called every frame during internal process.
		</member>
		<member name="skeleton_path" type="NodePath" setter="set_skeleton_path" getter="get_skeleton_path" default="NodePath(&quot;..&quot;)">
			Node path to the attached [Skeleton2D].
		</member>
	</members>
</class>
