%% PackCC grammar for HDDL 2.1 Problem Files

%%whitespace <- [ \t\r\n]+  % Define whitespace characters globally
%%comment    <- ';' (![\r\n] .)* [\r\n]? % Define semicolon comments globally

% --- Basic lexical elements ---
IDENT      <- [a-zA-Z_][a-zA-Z0-9_\-]*
VAR        <- '?' IDENT
NUMBER     <- '-'? [0-9]+ ('.' [0-9]+)?

% --- Top-level Problem Structure ---
problem      <- '(' 'define' '(' 'problem' IDENT ')' problem_body* ')' EOT
EOT        <- !. % End of Text Mark

% --- Problem Body Sections ---
problem_body <- domain_ref / objects / init / goal / htn / metric

domain_ref   <- '(' ':domain' IDENT ')'
objects      <- '(' ':objects' typed_ident_list? ')' % Objects section can be empty
init         <- '(' ':init' init_literal* ')'
goal         <- '(' ':goal' goal_description ')' % Standard PDDL goal, less common in pure HTN
htn          <- '(' ':htn' htn_body* ')'
metric       <- '(' ':metric' 'minimize' metric_expr ')'

% --- Typed Lists ---
% Used for objects
typed_ident_list <- (IDENT+ '-' IDENT)* IDENT*

% Used for quantified goals/effects within constraints if needed
typed_var_list   <- (VAR+ '-' IDENT)* VAR*

% --- Initial State Literals ---
init_literal <- atomic_formula_ident / % Ground predicate, e.g., (at truck1 loc1)
                '(' '=' fluent_ident NUMBER ')' / % Function assignment, e.g., (= (fuel truck1) 100)
                timed_initial_literal % Optional: If supporting TILs

fluent_ident <- '(' IDENT IDENT* ')' % A function symbol with ground arguments, e.g., (fuel truck1)

timed_initial_literal <- '(' 'at' NUMBER init_literal ')' % e.g., (at 5 (loaded truck1 pkgA))

% --- HTN Section Details ---
htn_body     <- htn_tasks / htn_ordering / htn_constraints

htn_tasks      <- ':tasks' subtask_list
htn_ordering   <- ':ordering' ordering_constraints
htn_constraints<- ':constraints' goal_description % HTN constraints often reuse goal syntax

% Subtasks list (can be ordered or unordered)
subtask_list <- '(' ('ordered' / 'unordered')? subtask_def+ ')'
subtask_def  <- IDENT atomic_formula_term % Subtask ID and task atom, e.g., t1 (deliver pkgA loc3)

% Ordering constraints between subtask IDs
ordering_constraints <- '(' '<' IDENT IDENT ')'+

% --- Goal Description (Used in :goal and :constraints) ---
goal_description <- atomic_formula_term / logical_goal / quantified_goal / comparison

logical_goal <- '(' ('and' / 'or') goal_description* ')' /
                '(' 'not' goal_description ')' /
                '(' 'imply' goal_description goal_description ')'

quantified_goal <- '(' ('forall' / 'exists') '(' typed_var_list ')' goal_description ')'

comparison <- '(' comparison_op fluent_term fluent_term ')' % e.g., (> (fuel truck1) 10)
comparison_op <- '=' / '>' / '<' / '>=' / '<='

% --- Atomic Formulas and Terms ---
% Used in goals, HTN tasks, constraints
atomic_formula_term <- '(' IDENT term* ')'
term         <- VAR / IDENT % Variables or object constants

% Used in init state (only object constants allowed)
atomic_formula_ident <- '(' IDENT IDENT* ')'

% --- Metric Expression ---
metric_expr  <- NUMBER / fluent_ident / % e.g., 1, (total-cost)
                '(' metric_op metric_expr+ ')' / % e.g., (+ (fuel-cost) (time-cost))
                '(' '-' metric_expr ')' / % Unary minus
                'is-violated' IDENT % For plan quality metrics

metric_op    <- '+' / '-' / '*' / '/'

% --- Fluent Term (Used in comparisons and metrics) ---
% Represents a numeric function or predicate applied to terms
fluent_term <- NUMBER / '(' IDENT term* ')'
