#!/usr/bin/env python
from misc.utility.scons_hints import *

# Minimal SCsub for sandbox module: no renaming, just link to built libraries
Import("env")
Import("env_modules")


def get_addon_platform():
    return env["platform"].replace("linuxbsd", "linux")


def get_addon_threads():
    return "yes" if env["threads"] else "no"


def get_addon_llvm():
    return "yes" if env.get("use_llvm", False) else "no"


def get_addon_devbuild():
    return "yes" if env.get("dev_build", False) else "no"


def get_addon_target():
    return "template_release" if env["target"] == "editor" else env["target"]


def get_addon_mingw():
    return "yes" if env.get("use_mingw", False) else "no"


def get_sufix():
    suffix = f".{get_addon_platform()}.{get_addon_target()}"
    if env.get("dev_build", False):
        suffix += ".dev"
    if env["precision"] == "double":
        suffix += ".double"
    suffix += f".{env['arch']}"
    if not env["threads"]:
        suffix += ".nothreads"
    if env.get("use_llvm", False):
        suffix += ".llvm"
    return suffix


suffix = get_sufix()
godot_cpp_path = "#modules/sandbox/thirdparty/godot-cpp/bin"

if env["platform"] == "ios":
    env.Append(LIBPATH=["#modules/sandbox/bin", godot_cpp_path])
    env.Append(LIBS=[f"libsandbox{suffix}", f"libgodot-cpp{suffix}"])
elif env["platform"] != "windows" or env.get("use_mingw", False):
    env.Append(LIBPATH=["#modules/sandbox/bin", godot_cpp_path])
    env.Append(LIBS=[f"sandbox{suffix}", f"godot-cpp{suffix}"])
else:
    env.Append(LIBPATH=["#modules/sandbox/bin", godot_cpp_path])
    env.Append(LIBS=["sandbox", "godot-cpp"])

env.add_source_files(env.modules_sources, "register_types.cpp")


env_sandbox = env_modules.Clone()
suffix = get_sufix()
godot_cpp_path = "#modules/sandbox/thirdparty/godot-cpp/bin"
if env["platform"] == "ios":
    env_sandbox.Append(LIBPATH=["#modules/sandbox/bin", godot_cpp_path])
    env_sandbox.Append(LIBS=[f"libsandbox{suffix}", f"libgodot-cpp{suffix}"])
elif env["platform"] != "windows" or env.get("use_mingw", False):
    env.Append(LIBPATH=["#modules/sandbox/bin", godot_cpp_path])
    env.Append(LIBS=[f"sandbox{suffix}", f"godot-cpp{suffix}"])
else:
    env.Append(LIBPATH=["#modules/sandbox/bin", godot_cpp_path])
    env.Append(LIBS=["sandbox", "godot-cpp"])


env.add_source_files(env.modules_sources, "register_types.cpp")
