#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

env_sandbox = env_modules.Clone()

# Enable exceptions for libriscv (required)
env_sandbox.Append(CPPDEFINES=["RISCV_EXCEPTIONS_ENABLED"])
if env["platform"] != "windows":
    env_sandbox.Append(CXXFLAGS=["-fexceptions"])
else:
    env_sandbox.Append(CXXFLAGS=["/EHsc"])

# Add compiler definitions for libriscv
env_sandbox.Append(CPPDEFINES=["RISCV_SYSCALLS_MAX=600", "RISCV_BRK_MEMORY_SIZE=0x100000"])

# Add include paths
env_sandbox.Prepend(CPPPATH=["#modules/sandbox/thirdparty/libriscv/lib"])
env_sandbox.Append(CPPPATH=["#modules/sandbox/src/", "#modules/sandbox/."])

# Set C++20 standard
if env["platform"] != "windows" or env.get("use_mingw", False):
    env_sandbox.Append(CXXFLAGS=["-std=c++20"])
else:
    env_sandbox.Append(CXXFLAGS=["/std:c++20"])

# Platform-specific configurations
if env["platform"] == "windows":
    env_sandbox.Prepend(CPPPATH=["#modules/sandbox/thirdparty/libriscv/lib/libriscv/lib/win32"])
    env_sandbox.Prepend(LIBS=["ws2_32"])  # for socket calls
elif env["platform"] == "macos":
    env_sandbox.Prepend(CPPPATH=["#modules/sandbox/thirdparty/libriscv/lib/libriscv/lib/macos"])
    env_sandbox.Append(LINKFLAGS=["-framework", "Security"])
elif env["platform"] == "linux" or env["platform"] == "android":
    env_sandbox.Prepend(CPPPATH=["#modules/sandbox/thirdparty/libriscv/lib/libriscv/lib/linux"])

# Add libriscv source files
librisc_sources = [
    # threaded fast-path:
    "thirdparty/libriscv/lib/libriscv/threaded_dispatch.cpp",
    "thirdparty/libriscv/lib/libriscv/threaded_inaccurate_dispatch.cpp",
    "thirdparty/libriscv/lib/libriscv/cpu.cpp",
    "thirdparty/libriscv/lib/libriscv/debug.cpp",
    "thirdparty/libriscv/lib/libriscv/decode_bytecodes.cpp",
    "thirdparty/libriscv/lib/libriscv/decoder_cache.cpp",
    "thirdparty/libriscv/lib/libriscv/machine.cpp",
    "thirdparty/libriscv/lib/libriscv/machine_defaults.cpp",
    "thirdparty/libriscv/lib/libriscv/memory.cpp",
    "thirdparty/libriscv/lib/libriscv/memory_elf.cpp",
    "thirdparty/libriscv/lib/libriscv/memory_mmap.cpp",
    "thirdparty/libriscv/lib/libriscv/memory_rw.cpp",
    "thirdparty/libriscv/lib/libriscv/native_libc.cpp",
    "thirdparty/libriscv/lib/libriscv/native_threads.cpp",
    "thirdparty/libriscv/lib/libriscv/rv64i.cpp",
    "thirdparty/libriscv/lib/libriscv/serialize.cpp",
    # POSIX
    "thirdparty/libriscv/lib/libriscv/posix/minimal.cpp",
    "thirdparty/libriscv/lib/libriscv/posix/signals.cpp",
    "thirdparty/libriscv/lib/libriscv/posix/threads.cpp",
    "thirdparty/libriscv/lib/libriscv/util/crc32c.cpp",
    # Binary translator
    "thirdparty/libriscv/lib/libriscv/tr_api.cpp",
    "thirdparty/libriscv/lib/libriscv/tr_emit.cpp",
    "thirdparty/libriscv/lib/libriscv/tr_translate.cpp",
]

# Platform-specific libriscv sources
if env["platform"] == "windows":
    librisc_sources += [
        "thirdparty/libriscv/lib/libriscv/win32/dlfcn.cpp",
        "thirdparty/libriscv/lib/libriscv/win32/system_calls.cpp",
        "thirdparty/libriscv/lib/libriscv/win32/tr_msvc.cpp",
    ]
else:
    librisc_sources += [
        "thirdparty/libriscv/lib/libriscv/linux/system_calls.cpp",
        "thirdparty/libriscv/lib/libriscv/tr_compiler.cpp",
    ]

# Add libriscv sources to the build
env_sandbox.add_source_files(env.modules_sources, librisc_sources)

# Add only the module registration source for now
# We'll add other sources once we convert them from godot-cpp to Godot internal APIs
env_sandbox.add_source_files(env.modules_sources, "register_types.cpp")

print("Sandbox module configured as pure Godot module (minimal)")
