import os
import subprocess
import platform

Import("env")

env.Append(
    CPPDEFINES=[],
)

env["builtin_zstd"] = False

env_thirdparty = env.Clone()
env_thirdparty.disable_warnings()

env.Append(CPPPATH=["#thirdparty/velopack/src/lib-cpp/include"])

source_files = [
    "*.cpp",
]

for source_file in source_files:
    env_thirdparty.add_source_files(env_thirdparty.modules_sources, source_file)

env.modules_sources += env_thirdparty.modules_sources

target = ""
arch = env["arch"]
env_platform = env["platform"]

if env_platform == "windows":
    if arch == "x86_64":
        target = "x86_64-pc-windows-gnu"

elif env_platform == "linuxbsd" or env_platform == "linux":
    if arch == "x86_64":
        target = "x86_64-unknown-linux-gnu"

elif env_platform == "macos":
    if arch == "x86_64":
        target = "x86_64-apple-darwin"
    elif arch == "arm64":
        target = "aarch64-apple-darwin"

elif env_platform == "android":
    if arch == "armv7":
        target = "armv7-linux-androideabi"
    elif arch == "aarch64":
        target = "aarch64-linux-android"

elif env_platform == "ios":
    if arch == "aarch64":
        target = "aarch64-apple-ios"

elif env_platform == "web":
    target = "wasm32-unknown-unknown"


subprocess.check_output(["rustup", "target", "add", target], stderr=subprocess.STDOUT)

if env["platform"] == "windows":
    env.Append(LIBS=[File("thirdparty/velopack/target/" + target + "/release/libvelopack.a")])

    env.Append(
        LIBPATH=["#modules/velopack/thirdparty/velopack/target/" + target + "/release"],
        LIBS=["ws2_32", "ntdll", "userenv"],
    )

    os_env = os.environ.copy()
    os_env["CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER"] = "ld"

    subprocess.run(
        ["cargo", "build", "--release", "--target", target],
        cwd="../../thirdparty/velopack",
        env=os_env,
    )
elif env_platform == "macos":
    env.Append(LINKFLAGS=["-framework", "SystemConfiguration"])

    targets = ["x86_64-apple-darwin", "aarch64-apple-darwin"]

    env.Append(
        LIBPATH=["#modules/velopack/thirdparty/velopack/target/" + f"{target}" + "/release"],
        LIBS=["velopack"],
    )
    for target in targets:
        subprocess.check_output(["rustup", "target", "add", target], stderr=subprocess.STDOUT)
        subprocess.run(["cargo", "build", "--release", "--target", target], cwd="thirdparty/velopack/velopack")

else:
    env.Append(
        LIBPATH=["#modules/velopack/thirdparty/velopack/target/release"],
        LIBS=["velopack"],
    )

    subprocess.run(["cargo", "build", "--release"], cwd="thirdparty/velopack/velopack")
