#!/usr/bin/env python
from misc.utility.scons_hints import *

import os

Import("env")
Import("env_modules")

# Thirdparty sources

libvpx_dir = "#thirdparty/libvpx/"

libvpx_sources = [
    "vp8/vp8_dx_iface.c",
    # VP8 common files
    "vp8/common/generic/systemdependent.c",
    "vp8/common/alloccommon.c",
    "vp8/common/blockd.c",
    "vp8/common/context.c",
    "vp8/common/debugmodes.c",
    "vp8/common/dequantize.c",
    "vp8/common/entropy.c",
    "vp8/common/entropymode.c",
    "vp8/common/entropymv.c",
    "vp8/common/extend.c",
    "vp8/common/filter.c",
    "vp8/common/findnearmv.c",
    "vp8/common/idct_blk.c",
    "vp8/common/idctllm.c",
    "vp8/common/loopfilter_filters.c",
    "vp8/common/mbpitch.c",
    "vp8/common/modecont.c",
    "vp8/common/quant_common.c",
    "vp8/common/reconinter.c",
    "vp8/common/reconintra.c",
    "vp8/common/reconintra4x4.c",
    "vp8/common/setupintrarecon.c",
    "vp8/common/swapyv12buffer.c",
    "vp8/common/treecoder.c",
    "vp8/common/vp8_loopfilter.c",
    "vp8/common/vp8_skin_detection.c",
    # VP8 decoder files
    "vp8/decoder/decodeframe.c",
    "vp8/decoder/dboolhuff.c",
    "vp8/decoder/decodemv.c",
    "vp8/decoder/threading.c",
    "vp8/decoder/detokenize.c",
    "vp8/decoder/onyxd_if.c",
    "vp9/vp9_dx_iface.c",
    # VP9 common files (excluding post-processing and error concealment)
    "vp9/common/vp9_alloccommon.c",
    "vp9/common/vp9_blockd.c",
    "vp9/common/vp9_common_data.c",
    "vp9/common/vp9_debugmodes.c",
    "vp9/common/vp9_entropy.c",
    "vp9/common/vp9_entropymode.c",
    "vp9/common/vp9_entropymv.c",
    "vp9/common/vp9_filter.c",
    "vp9/common/vp9_frame_buffers.c",
    "vp9/common/vp9_idct.c",
    "vp9/common/vp9_loopfilter.c",
    "vp9/common/vp9_mvref_common.c",
    "vp9/common/vp9_pred_common.c",
    "vp9/common/vp9_quant_common.c",
    "vp9/common/vp9_reconinter.c",
    "vp9/common/vp9_reconintra.c",
    "vp9/common/vp9_scale.c",
    "vp9/common/vp9_scan.c",
    "vp9/common/vp9_seg_common.c",
    "vp9/common/vp9_thread_common.c",
    "vp9/common/vp9_tile_common.c",
    # VP9 decoder files
    "vp9/decoder/vp9_job_queue.c",
    "vp9/decoder/vp9_decodemv.c",
    "vp9/decoder/vp9_decodeframe.c",
    "vp9/decoder/vp9_detokenize.c",
    "vp9/decoder/vp9_dsubexp.c",
    "vp9/decoder/vp9_decoder.c",
    "vpx/src/vpx_codec.c",
    "vpx/src/vpx_decoder.c",
    "vpx/src/vpx_image.c",
    "vpx_dsp/bitreader.c",
    "vpx_dsp/bitreader_buffer.c",
    "vpx_dsp/intrapred.c",
    "vpx_dsp/inv_txfm.c",
    "vpx_dsp/loopfilter.c",
    "vpx_dsp/prob.c",
    "vpx_dsp/vpx_convolve.c",
    "vpx_dsp/variance.c",
    "vpx_dsp/sad.c",
    "vpx_dsp/sse.c",
    "vpx_dsp/sum_squares.c",
    "vpx_dsp/subtract.c",
    "vpx_dsp/avg.c",
    "vpx_dsp/quantize.c",
    "vpx_dsp/fwd_txfm.c",
    "vpx_mem/vpx_mem.c",
    "vpx_scale/generic/yv12config.c",
    "vpx_scale/generic/yv12extend.c",
    "vpx_util/vpx_thread.c",
]

libvpx_sources_mt = [
]

libvpx_sources_intrin_x86 = [
    "vp8/common/x86/vp8_asm_stubs.c",
]
libvpx_sources_intrin_x86_sse2 = [
    "vp8/common/x86/idct_blk_sse2.c",
    "vp9/common/x86/vp9_idct_intrin_sse2.c",
    "vpx_dsp/x86/avg_intrin_sse2.c",
    "vpx_dsp/x86/avg_pred_sse2.c",
    "vpx_dsp/x86/fwd_txfm_sse2.c",
    "vpx_dsp/x86/highbd_idct16x16_add_sse2.c",
    "vpx_dsp/x86/highbd_idct32x32_add_sse2.c",
    "vpx_dsp/x86/highbd_idct4x4_add_sse2.c",
    "vpx_dsp/x86/highbd_idct8x8_add_sse2.c",
    "vpx_dsp/x86/highbd_intrapred_intrin_sse2.c",
    "vpx_dsp/x86/highbd_loopfilter_sse2.c",
    "vpx_dsp/x86/highbd_quantize_intrin_sse2.c",
    "vpx_dsp/x86/highbd_variance_sse2.c",
    "vpx_dsp/x86/inv_txfm_sse2.c",
    "vpx_dsp/x86/loopfilter_sse2.c",
    "vpx_dsp/x86/post_proc_sse2.c",
    "vpx_dsp/x86/quantize_sse2.c",
    "vpx_dsp/x86/sum_squares_sse2.c",
    "vpx_dsp/x86/variance_sse2.c",
    "vpx_dsp/x86/vpx_subpixel_4t_intrin_sse2.c",
]
libvpx_sources_intrin_x86_ssse3 = [
    "vpx_dsp/x86/highbd_intrapred_intrin_ssse3.c",
    "vpx_dsp/x86/inv_txfm_ssse3.c",
    "vpx_dsp/x86/quantize_ssse3.c",
    "vpx_dsp/x86/vpx_subpixel_8t_intrin_ssse3.c",
]
libvpx_sources_intrin_x86_sse4 = [
    "vpx_dsp/x86/highbd_idct16x16_add_sse4.c",
    "vpx_dsp/x86/highbd_idct32x32_add_sse4.c",
    "vpx_dsp/x86/highbd_idct4x4_add_sse4.c",
    "vpx_dsp/x86/highbd_idct8x8_add_sse4.c",
    "vpx_dsp/x86/sse_sse4.c",
]

libvpx_sources_arm = [
    "vpx_ports/arm_cpudetect.c",
    "vp8/common/arm/loopfilter_arm.c",
]
libvpx_sources_arm_neon = [
    # VP8 ARM NEON files
    "vp8/common/arm/neon/bilinearpredict_neon.c",
    "vp8/common/arm/neon/copymem_neon.c",
    "vp8/common/arm/neon/dc_only_idct_add_neon.c",
    "vp8/common/arm/neon/dequant_idct_neon.c",
    "vp8/common/arm/neon/dequantizeb_neon.c",
    "vp8/common/arm/neon/idct_blk_neon.c",
    "vp8/common/arm/neon/iwalsh_neon.c",
    "vp8/common/arm/neon/loopfiltersimplehorizontaledge_neon.c",
    "vp8/common/arm/neon/loopfiltersimpleverticaledge_neon.c",
    "vp8/common/arm/neon/mbloopfilter_neon.c",
    "vp8/common/arm/neon/shortidct4x4llm_neon.c",
    "vp8/common/arm/neon/sixtappredict_neon.c",
    "vp8/common/arm/neon/vp8_loopfilter_neon.c",
    # VP9 ARM NEON files
    "vp9/common/arm/neon/vp9_highbd_iht16x16_add_neon.c",
    "vp9/common/arm/neon/vp9_highbd_iht4x4_add_neon.c",
    "vp9/common/arm/neon/vp9_highbd_iht8x8_add_neon.c",
    "vp9/common/arm/neon/vp9_iht16x16_add_neon.c",
    "vp9/common/arm/neon/vp9_iht4x4_add_neon.c",
    "vp9/common/arm/neon/vp9_iht8x8_add_neon.c",
    # VPX_DSP ARM NEON files (intrinsics only, no assembly)
    "vpx_dsp/arm/avg_neon.c",
    "vpx_dsp/arm/avg_pred_neon.c",
    "vpx_dsp/arm/deblock_neon.c",
    "vpx_dsp/arm/fdct16x16_neon.c",
    "vpx_dsp/arm/fdct32x32_neon.c",
    "vpx_dsp/arm/fdct4x4_neon.c",
    "vpx_dsp/arm/fdct8x8_neon.c",
    "vpx_dsp/arm/fdct_partial_neon.c",
    "vpx_dsp/arm/hadamard_neon.c",
    "vpx_dsp/arm/highbd_avg_neon.c",
    "vpx_dsp/arm/highbd_avg_pred_neon.c",
    "vpx_dsp/arm/highbd_hadamard_neon.c",
    "vpx_dsp/arm/highbd_idct16x16_add_neon.c",
    "vpx_dsp/arm/highbd_idct32x32_1024_add_neon.c",
    "vpx_dsp/arm/highbd_idct32x32_135_add_neon.c",
    "vpx_dsp/arm/highbd_idct32x32_34_add_neon.c",
    "vpx_dsp/arm/highbd_idct32x32_add_neon.c",
    "vpx_dsp/arm/highbd_idct4x4_add_neon.c",
    "vpx_dsp/arm/highbd_idct8x8_add_neon.c",
    "vpx_dsp/arm/highbd_intrapred_neon.c",
    "vpx_dsp/arm/highbd_loopfilter_neon.c",
    "vpx_dsp/arm/highbd_quantize_neon.c",
    "vpx_dsp/arm/highbd_sad4d_neon.c",
    "vpx_dsp/arm/highbd_sad_neon.c",
    "vpx_dsp/arm/highbd_sse_neon.c",
    "vpx_dsp/arm/highbd_subpel_variance_neon.c",
    "vpx_dsp/arm/highbd_variance_neon.c",
    "vpx_dsp/arm/highbd_vpx_convolve8_neon.c",
    "vpx_dsp/arm/highbd_vpx_convolve_avg_neon.c",
    "vpx_dsp/arm/highbd_vpx_convolve_copy_neon.c",
    "vpx_dsp/arm/idct16x16_1_add_neon.c",
    "vpx_dsp/arm/idct16x16_add_neon.c",
    "vpx_dsp/arm/idct32x32_135_add_neon.c",
    "vpx_dsp/arm/idct32x32_1_add_neon.c",
    "vpx_dsp/arm/idct32x32_34_add_neon.c",
    "vpx_dsp/arm/idct32x32_add_neon.c",
    "vpx_dsp/arm/idct4x4_1_add_neon.c",
    "vpx_dsp/arm/idct4x4_add_neon.c",
    "vpx_dsp/arm/idct8x8_1_add_neon.c",
    "vpx_dsp/arm/idct8x8_add_neon.c",
    "vpx_dsp/arm/intrapred_neon.c",
    "vpx_dsp/arm/loopfilter_neon.c",
    "vpx_dsp/arm/quantize_neon.c",
    "vpx_dsp/arm/sad4d_neon.c",
    "vpx_dsp/arm/sad_neon.c",
    "vpx_dsp/arm/sse_neon.c",
    "vpx_dsp/arm/subpel_variance_neon.c",
    "vpx_dsp/arm/subtract_neon.c",
    "vpx_dsp/arm/sum_squares_neon.c",
    "vpx_dsp/arm/variance_neon.c",
    "vpx_dsp/arm/vpx_convolve8_neon_asm.c",
    "vpx_dsp/arm/vpx_convolve8_neon.c",
    "vpx_dsp/arm/vpx_convolve_avg_neon.c",
    "vpx_dsp/arm/vpx_convolve_copy_neon.c",
    "vpx_dsp/arm/vpx_convolve_neon.c",
    "vpx_dsp/arm/vpx_scaled_convolve8_neon.c",
]
libvpx_sources_arm_neon_gas = [
    "vpx_dsp/arm/gas/intrapred_neon_asm.s",
    "vpx_dsp/arm/gas/loopfilter_mb_neon.s",
    "vpx_dsp/arm/gas/save_reg_neon.s",
]
libvpx_sources_arm_neon_armasm_ms = [
    "vpx_dsp/arm/armasm_ms/intrapred_neon_asm.asm",
    "vpx_dsp/arm/armasm_ms/loopfilter_mb_neon.asm",
    "vpx_dsp/arm/armasm_ms/save_reg_neon.asm",
]
libvpx_sources_arm_neon_gas_apple = [
    "vpx_dsp/arm/gas_apple/intrapred_neon_asm.s",
    "vpx_dsp/arm/gas_apple/loopfilter_mb_neon.s",
    "vpx_dsp/arm/gas_apple/save_reg_neon.s",
]

libvpx_sources = [libvpx_dir + file for file in libvpx_sources]
libvpx_sources_mt = [libvpx_dir + file for file in libvpx_sources_mt]
libvpx_sources_intrin_x86 = [libvpx_dir + file for file in libvpx_sources_intrin_x86]
libvpx_sources_intrin_x86_sse2 = [libvpx_dir + file for file in libvpx_sources_intrin_x86_sse2]
libvpx_sources_intrin_x86_ssse3 = [libvpx_dir + file for file in libvpx_sources_intrin_x86_ssse3]
libvpx_sources_intrin_x86_sse4 = [libvpx_dir + file for file in libvpx_sources_intrin_x86_sse4]
libvpx_sources_arm = [libvpx_dir + file for file in libvpx_sources_arm]
libvpx_sources_arm_neon = [libvpx_dir + file for file in libvpx_sources_arm_neon]
libvpx_sources_arm_neon_gas = [libvpx_dir + file for file in libvpx_sources_arm_neon_gas]
libvpx_sources_arm_neon_armasm_ms = [libvpx_dir + file for file in libvpx_sources_arm_neon_armasm_ms]
libvpx_sources_arm_neon_gas_apple = [libvpx_dir + file for file in libvpx_sources_arm_neon_gas_apple]


env_libvpx = env.Clone()
env_libvpx.disable_warnings()
env_libvpx.Prepend(CPPPATH=[libvpx_dir])

webm_multithread = env_libvpx["platform"] != "javascript"

cpu = env_libvpx["arch"]
webm_cpu_x86 = False
webm_cpu_arm = False
if (cpu == "arm64" or cpu == "arm32") and env["platform"] not in ["ios", "macos"]:
    webm_cpu_arm = True
elif cpu == "x86_64":
    webm_cpu_x86 = True

webm_simd_optimizations = False

if webm_cpu_x86:
    webm_simd_optimizations = True

if webm_cpu_arm:
    webm_simd_optimizations = True

if not webm_simd_optimizations:
    print("WebM SIMD optimizations are disabled. Check if your CPU architecture, CPU bits or platform are supported!")

env_libvpx.add_source_files(env_libvpx.modules_sources, libvpx_sources)

if webm_multithread:
    env_libvpx.add_source_files(env_libvpx.modules_sources, libvpx_sources_mt)

if webm_cpu_x86:
    is_clang_or_gcc = (
        ("gcc" in os.path.basename(env_libvpx["CC"])) or ("clang" in os.path.basename(env["CC"])) or ("osxcross" in env)
    )

    env_libvpx_sse2 = env_libvpx.Clone()
    env_libvpx_sse2.add_source_files(env_libvpx.modules_sources, libvpx_sources_intrin_x86_sse2)

    env_libvpx_ssse3 = env_libvpx.Clone()
    if is_clang_or_gcc:
        env_libvpx_ssse3.Append(CCFLAGS=["-mssse3"])
    env_libvpx_ssse3.add_source_files(env_libvpx.modules_sources, libvpx_sources_intrin_x86_ssse3)

    env_libvpx_sse4 = env_libvpx.Clone()
    if is_clang_or_gcc:
        env_libvpx_sse4.Append(CCFLAGS=["-msse4.1"])
    env_libvpx_sse4.add_source_files(env_libvpx.modules_sources, libvpx_sources_intrin_x86_sse4)

    env_libvpx.add_source_files(env_libvpx.modules_sources, libvpx_sources_intrin_x86)
if webm_cpu_arm:
    env_libvpx.add_source_files(env_libvpx.modules_sources, libvpx_sources_arm)

    if env_libvpx["platform"] == "android":
        env_libvpx.Prepend(CPPPATH=[libvpx_dir + "third_party/android"])
        env_libvpx.add_source_files(env_libvpx.modules_sources, [libvpx_dir + "third_party/android/cpu-features.c"])

    env_libvpx_neon = env_libvpx.Clone()
    env_libvpx_neon.add_source_files(env_libvpx.modules_sources, libvpx_sources_arm_neon)
