// Copyright 2024 Imagination Technologies, inc.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert LMUL in [1, 2, 4, 8]
#include <assert.h>

#include <riscv_vector.h>

#include "src/xnnpack/common.h"
#include "src/xnnpack/reduce.h"


void xnn_f32_rdsum_ukernel_${ACCUMULATORS}p${ACCUMULATORS}x__rvv_u${LMUL}v(
    size_t channels,
    size_t k1,
    size_t k2,
    size_t k3,
    const float* input,
    size_t input_stride1,
    size_t input_stride2,
    size_t input_stride3,
    const float* zero,
    float* output,
    const struct xnn_f32_scale_params* restrict params)
{
  assert(k1 != 0);
  assert(channels != 0);
  assert(input != NULL);
  assert(output != NULL);

  const float scale = params->scalar.scale;
  float* original_output = output;
  size_t original_channels = channels;

  size_t input_increment = ${ACCUMULATORS} * input_stride1;
  for (size_t k = 0; k < k3; ++k) {
    for (size_t j = 0; j < k2; ++j) {
      const float* input_row = (const float*)((uintptr_t)input + j * input_stride2 + k * input_stride3);
      output = original_output;
      channels = original_channels;

      for (; channels > 0; ) {
        size_t n = __riscv_vsetvl_e32m${LMUL}(channels); channels -= n;
        const float* i0 = input_row;
        $for i in range(1, ACCUMULATORS):
          const float* i${i} = (const float*) ((uintptr_t) i${i - 1} + input_stride1);
        vfloat32m${LMUL}_t acc_f32v = __riscv_vfmv_v_f_f32m${LMUL}(0.f, n);

        for (int r = k1; r > 0; r -= ${ACCUMULATORS}) {
          $for N in range(1, ACCUMULATORS, 2):
            if XNN_UNPREDICTABLE(r < ${N+1}) {
              i${N} = zero;
            }
            if XNN_UNPREDICTABLE(r <= ${N+1}) {
              i${N+1} = zero;
            }

          $for N in range(0, ACCUMULATORS):
            vfloat32m${LMUL}_t in${N}_f32v = __riscv_vle32_v_f32m${LMUL}(i${N}, n);
            acc_f32v = __riscv_vfadd_vv_f32m${LMUL}(acc_f32v, in${N}_f32v, n);

          $for N in range(0, ACCUMULATORS):
            i${N} = (const float*) ((uintptr_t) i${N} + input_increment);
        }
        acc_f32v = __riscv_vfmul_vf_f32m${LMUL}(acc_f32v, scale, n);
        vfloat32m${LMUL}_t out_f32v = __riscv_vle32_v_f32m${LMUL}(output, n);
        out_f32v = __riscv_vfadd_vv_f32m${LMUL}(out_f32v, acc_f32v, n);
        __riscv_vse32_v_f32m${LMUL}(output, out_f32v, n); output += n;

        input_row = (const float*) ((uintptr_t) input_row + n * sizeof(float));
      }
    }
  }
}
