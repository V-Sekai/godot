// Copyright 2022 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 1
$assert OP in ["ADD", "DIV", "MAX", "MIN", "MUL", "SUB", "SQRDIFF"]
#include <arm_fp16.h>
#include <assert.h>
#include <stddef.h>
#include <stdint.h>

$if BATCH_TILE > 1:
  #include "src/xnnpack/common.h"
#include "src/xnnpack/intrinsics-polyfill.h"
#include "src/xnnpack/math.h"
#include "src/xnnpack/microparams.h"
#include "src/xnnpack/vbinary.h"


$VOPH_F16 = {
$  "ADD": lambda x, y: "vaddh_f16(%s, %s)" % (x, y),
$  "DIV": lambda x, y: "vdivh_f16(%s, %s)" % (x, y),
$  "MAX": lambda x, y: "vmaxnmh_f16(%s, %s)" % (x, y),
$  "MIN": lambda x, y: "vminnmh_f16(%s, %s)" % (x, y),
$  "MUL": lambda x, y: "vmulh_f16(%s, %s)" % (x, y),
$  "SUB": lambda x, y: "vsubh_f16(%s, %s)" % (x, y),
$  "SQRDIFF": lambda x, y: "vsubh_f16(%s, %s)" % (x, y),
$}[OP]
void xnn_f16_v${OP.lower()}_ukernel__fp16arith_u${BATCH_TILE}(
    size_t batch,
    const xnn_float16* restrict input_a,
    const xnn_float16* restrict input_b,
    xnn_float16* restrict output,
    const struct xnn_f16_default_params* restrict params)
{
  assert(batch != 0);
  assert(batch % sizeof(float16_t) == 0);
  assert(input_a != NULL);
  assert(input_b != NULL);
  assert(output != NULL);

  const float16_t* a = (const float16_t*) input_a;
  const float16_t* b = (const float16_t*) input_b;
  float16_t* o = (float16_t*) output;

  $if BATCH_TILE > 1:
    for (; batch >= ${BATCH_TILE} * sizeof(float16_t); batch -= ${BATCH_TILE} * sizeof(float16_t)) {
      $for N in range(BATCH_TILE):
        const float16_t va${N} = *a++;

      $for N in range(BATCH_TILE):
        const float16_t vb${N} = *b++;

      $for N in range(BATCH_TILE):
        float16_t vacc${N} = ${VOPH_F16("va" + str(N), "vb" + str(N))};

      $if OP == "SQRDIFF":
        $for N in range(BATCH_TILE):
          vacc${N} = vmulh_f16(vacc${N}, vacc${N});

      $for N in range(BATCH_TILE):
        *o++ = vacc${N};
    }
    if XNN_UNLIKELY(batch != 0) {
      $if BATCH_TILE > 2:
        do {
          const float16_t va = *a++;
          const float16_t vb = *b++;
          float16_t vacc = ${VOPH_F16("va", "vb")};
          $if OP == "SQRDIFF":
            vacc = vmulh_f16(vacc, vacc);
          *o++ = vacc;
          batch -= sizeof(float16_t);
        } while (batch != 0);
      $else:
        const float16_t va = *a;
        const float16_t vb = *b;
        float16_t vacc = ${VOPH_F16("va", "vb")};
        $if OP == "SQRDIFF":
          vacc = vmulh_f16(vacc, vacc);
        *o = vacc;
    }
  $else:
    do {
      const float16_t va = *a++;
      const float16_t vb = *b++;
      float16_t vacc = ${VOPH_F16("va", "vb")};
      $if OP == "SQRDIFF":
        vacc = vmulh_f16(vacc, vacc);
      *o++ = vacc;
      batch -= sizeof(float16_t);
    } while (batch != 0);
}
