#!/usr/bin/env python
from misc.utility.scons_hints import *

Import("env")
Import("env_modules")

env_vk_video = env_modules.Clone()

# Thirdparty source files - embedded dependencies

thirdparty_obj = []

# Embedded libsimplewebm
thirdparty_dir = "#modules/vk_video/thirdparty/libsimplewebm/"
thirdparty_sources = [
    "libwebm/mkvparser/mkvparser.cc",
    "OpusVorbisDecoder.cpp",
    "WebMDemuxer.cpp",
]
thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

env_vk_video.Prepend(CPPPATH=[thirdparty_dir, thirdparty_dir + "libwebm/"])

# VkCodecUtils sources - removed to eliminate complex dependencies
# Using simplified extracted components instead
vk_codec_utils_sources = []

# Vulkan Video defines
env_vk_video.Append(CPPDEFINES=["VK_NO_PROTOTYPES"])
if env["vulkan"]:
    env_vk_video.Append(CPPDEFINES=["VULKAN_ENABLED"])

# Add VkCodecUtils sources to thirdparty
thirdparty_sources.extend(vk_codec_utils_sources)

if env["builtin_opus"]:
    env_vk_video.Prepend(CPPPATH=["#modules/vk_video/thirdparty/libopus"])
    SConscript("opus/SCsub")

env_vk_video.Prepend(CPPPATH=["#thirdparty/libvorbis"])
env_vk_video.Prepend(CPPPATH=["#thirdparty/libogg"])

# Opus configuration
env_vk_video.Append(CPPDEFINES=["HAVE_CONFIG_H"])

# Platform-specific Opus optimizations
if env["platform"] == "android":
    if env["arch"] == "arm32":
        env_vk_video.Append(CPPDEFINES=["OPUS_ARM_OPT"])
    elif env["arch"] == "arm64":
        env_vk_video.Append(CPPDEFINES=["OPUS_ARM64_OPT"])
elif env["platform"] == "iphone":
    if env["arch"] == "arm32":
        env_vk_video.Append(CPPDEFINES=["OPUS_ARM_OPT"])
    elif env["arch"] == "arm64":
        env_vk_video.Append(CPPDEFINES=["OPUS_ARM64_OPT"])
elif env["platform"] == "osx":
    if env["arch"] == "arm64":
        env_vk_video.Append(CPPDEFINES=["OPUS_ARM64_OPT"])

# Combine all thirdparty sources
all_thirdparty_sources = thirdparty_sources

# Build thirdparty libraries
env_thirdparty = env_vk_video.Clone()
env_thirdparty.disable_warnings()
env_thirdparty.add_source_files(thirdparty_obj, all_thirdparty_sources)
env.modules_sources += thirdparty_obj

# Godot source files

module_obj = []

# Add specific source files, excluding problematic ones
godot_sources = [
    "register_types.cpp",
    "rendering_device_video_extensions.cpp", 
    "video_stream_av1.cpp",
    "video_stream_mkv.cpp",
    "vulkan_video_core.cpp",
]

for source in godot_sources:
    env_vk_video.add_source_files(module_obj, source)

env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
